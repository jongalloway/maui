trigger:
  branches:
    include:
    - main
    - main-handler
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pr:
  branches:
    include:
    - main
    - main-handler
  paths:
    include:
    - '*'
    exclude:
    - .github/*
    - docs/*
    - CODE-OF-CONDUCT.md
    - CONTRIBUTING.md
    - LICENSE.TXT
    - PATENTS.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - main

variables:
  - template: /eng/pipelines/common/variables.yml
  - template: /eng/pipelines/common/variables-net6.yml
  - name: LogDirectory
    value: $(Build.ArtifactStagingDirectory)\logs
  - name: provisionator.xcode
    value: '$(System.DefaultWorkingDirectory)/eng/provisioning/xcode.csx'
  - name: provisionator.path
    value: '$(System.DefaultWorkingDirectory)/eng/provisioning/provisioning.csx'
  - name: provisionator.extraArguments
    value: '--v'

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
      ref: refs/heads/main # still defaults to master even though main is the main branch

stages:
  - stage: windows
    displayName: Build Windows
    jobs:
      - job: win_hosted
        workspace:
          clean: all
        displayName: Build Windows Phase
        timeoutInMinutes: 60
        pool:
          name: $(vs2019VmPool)
          vmImage: $(vs2019VmImage)
          demands:
            msbuild
        strategy:
          matrix:
            debug:
              BuildConfiguration:  'Debug'
            release:
              BuildConfiguration:  'Release'
        steps:
          - template: common/build-windows.yml

  # - stage: build_osx
  #   displayName: iOS
  #   dependsOn: []
  #   jobs:
  #     - job: ios
  #       workspace:
  #         clean: all
  #       displayName: Build ControlGallery iOS
  #       timeoutInMinutes: 120
  #       pool:
  #         name:  $(macOSXVmPool)
  #         vmImage: $(macOSXVmImage)
  #         demands:
  #           - sh
  #           - Xamarin.iOS
  #       variables:
  #         provisionator.xcode : '$(System.DefaultWorkingDirectory)/eng/provisioning/xcode.csx'
  #         provisionator.path : '$(System.DefaultWorkingDirectory)/eng/provisioning/provisioning.csx'
  #         provisionator.extraArguments : '--v'
  #       steps:
  #         - template: common/controlgallery-ios.yml

  # - stage: build_android
  #   displayName: Android
  #   dependsOn: []
  #   jobs:
  #     - job: android
  #       workspace:
  #         clean: all
  #       displayName: Build ControlGallery Android
  #       timeoutInMinutes: 120
  #       pool:
  #         name:  $(macOSXVmPool)
  #         vmImage: $(macOSXVmImage)
  #       variables:
  #         renderers: 'FAST'
  #         outputfolder: 'newRenderers'
  #         provisionator.xcode : '$(System.DefaultWorkingDirectory)/eng/provisioning/xcode.csx'
  #         provisionator.path : '$(System.DefaultWorkingDirectory)/eng/provisioning/provisioning.csx'
  #         provisionator.extraArguments : '--v'
  #       steps:
  #         - template: common/controlgallery-android.yml

  - stage: pack_net6
    displayName: Pack .NET 6
    dependsOn: []
    jobs:
      - job: net6_pack_windows
        workspace:
          clean: all
        displayName: Pack .NET 6 Windows
        timeoutInMinutes: 120
        pool:
          vmImage: windows-latest
        steps:
          - pwsh: |
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
              & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
              & dotnet --list-sdks
            displayName: install .NET $(DotNetVersion)
            errorActionPreference: stop

          - pwsh: |
              & dotnet tool install --global boots
              & boots $(Android.Msi)
              & boots $(iOS.Msi)
            displayName: install .NET workloads
            errorActionPreference: stop

          - pwsh: ./.nuspec/package.ps1 -configuration Release
            displayName: pack nugets
            errorActionPreference: stop

          - task: CopyFiles@2
            displayName: 'Copy SignList.xml Files'
            inputs:
              Contents: |
                **/*.nupkg
                **/*.snupkg
                **/SignList.xml
              TargetFolder: $(build.artifactstagingdirectory)
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            displayName: publish artifacts
            inputs:
              ArtifactName: nuget-windows
            condition: always()

      - job: net6_pack_macos
        workspace:
          clean: all
        displayName: Pack .NET 6 macOS
        timeoutInMinutes: 120
        pool:
          vmImage:  macOS-latest
        variables:
          DotNet.Root: /usr/local/share/dotnet/
          DotNet.Tools: ~/.dotnet/tools
        steps:
          - task: UseDotNet@2
            displayName: install .NET Core 3.1
            inputs:
              version: 3.1.x
              installationPath: $(DotNet.Root)

          - bash: >
              export PATH="$(DotNet.Root):$(DotNet.Tools):$PATH" &&
              curl -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh &&
              sh dotnet-install.sh --version $(DotNetVersion) --install-dir $DOTNET_ROOT --verbose &&
              dotnet --list-sdks &&
              echo "##vso[task.setvariable variable=PATH]$PATH"
            displayName: install .NET $(DotNetVersion)

          - bash: |
              dotnet tool install --global boots
              boots $(Android.Pkg)
              boots $(iOS.Pkg)
              boots $(MacCatalyst.Pkg)
            displayName: install .NET workloads

          - bash: |
              set -x
              mkdir -p ~/Library/Preferences/Xamarin
              rm -f ~/Library/Preferences/Xamarin/Settings.plist
              /usr/libexec/PlistBuddy -c "add :AppleSdkRoot string $(dirname $(dirname $(xcode-select -p)))" ~/Library/Preferences/Xamarin/Settings.plist || true
              cat ~/Library/Preferences/Xamarin/Settings.plist || true
            displayName: configure vsmac xcode

          - pwsh: ./.nuspec/package.ps1 -configuration Release
            displayName: pack nugets
            errorActionPreference: stop

          - task: CopyFiles@2
            displayName: 'Copy SignList.xml Files'
            inputs:
              Contents: |
                **/*.nupkg
                **/*.snupkg
                **/SignList.xml
              TargetFolder: $(build.artifactstagingdirectory)
              flattenFolders: true

          - task: PublishBuildArtifacts@1
            displayName: publish artifacts
            inputs:
              ArtifactName: nuget
            condition: always()

  - stage: build_net6
    displayName: Build .NET 6
    dependsOn: []
    jobs:
      - job: net6_windows
        workspace:
          clean: all
        displayName: Build .NET 6 Windows
        timeoutInMinutes: 120
        pool:
          vmImage:  windows-latest
        strategy:
          matrix:
            debug:
              BuildConfiguration:  'Debug'
            release:
              BuildConfiguration:  'Release'
        steps:
          - powershell: |
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest -Uri "https://dot.net/v1/dotnet-install.ps1" -OutFile dotnet-install.ps1
              & .\dotnet-install.ps1 -Version $(DotNetVersion) -InstallDir "$env:ProgramFiles\dotnet\" -Verbose
              & dotnet --list-sdks
            displayName: install .NET $(DotNetVersion)
            errorActionPreference: stop

          - powershell: |
              & dotnet tool install --global boots
              & boots $(Android.Msi)
              & boots $(iOS.Msi)
            displayName: install .NET workloads
            errorActionPreference: stop

          - powershell: |
              & dotnet build Microsoft.Maui.BuildTasks-net6.sln -c $(BuildConfiguration) -bl:$(LogDirectory)\$(BuildConfiguration)-buildtasks.binlog
              & dotnet build Microsoft.Maui-net6.sln -c $(BuildConfiguration) -bl:$(LogDirectory)\$(BuildConfiguration).binlog
            displayName: build samples
            errorActionPreference: stop

          - task: PublishBuildArtifacts@1
            displayName: publish artifacts
            inputs:
              artifactName: NET6-WINDOWS
              targetPath: $(Build.ArtifactStagingDirectory)
            condition: always()

      - job: net6_macos
        workspace:
          clean: all
        displayName: Build .NET 6 macOS
        timeoutInMinutes: 120
        pool:
          name: $(macOSXNet6VmPool)
          vmImage: $(macOSXNet6VmImage)
        variables:
          DotNet.Root: /usr/local/share/dotnet/
          DotNet.Tools: ~/.dotnet/tools
        strategy:
          matrix:
            debug:
              BuildConfiguration:  'Debug'
            release:
              BuildConfiguration:  'Release'
        steps:
          - task: UseDotNet@2
            displayName: install .NET Core 3.1
            inputs:
              version: 3.1.x
              installationPath: $(DotNet.Root)

          - bash: >
              export PATH="$(DotNet.Root):$(DotNet.Tools):$PATH" &&
              curl -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh &&
              sh dotnet-install.sh --version $(DotNetVersion) --install-dir $DOTNET_ROOT --verbose &&
              dotnet --list-sdks &&
              echo "##vso[task.setvariable variable=PATH]$PATH"
            displayName: install .NET $(DotNetVersion)

          - bash: |
              dotnet tool install --global boots
              boots $(Android.Pkg)
              boots $(iOS.Pkg)
              boots $(MacCatalyst.Pkg)
            displayName: install .NET workloads

          - bash: |
              set -x
              mkdir -p ~/Library/Preferences/Xamarin
              rm -f ~/Library/Preferences/Xamarin/Settings.plist
              /usr/libexec/PlistBuddy -c "add :AppleSdkRoot string $(dirname $(dirname $(xcode-select -p)))" ~/Library/Preferences/Xamarin/Settings.plist || true
              cat ~/Library/Preferences/Xamarin/Settings.plist || true
            displayName: configure vsmac xcode

          - bash: |
              dotnet build Microsoft.Maui.BuildTasks-net6.sln -c $BUILDCONFIGURATION -bl:$BUILD_ARTIFACTSTAGINGDIRECTORY/logs/$BUILDCONFIGURATION-buildtasks.binlog &&
              dotnet build Microsoft.Maui-net6.sln -c $BUILDCONFIGURATION -bl:$BUILD_ARTIFACTSTAGINGDIRECTORY/logs/$BUILDCONFIGURATION.binlog
            displayName: build samples

          - task: PublishBuildArtifacts@1
            displayName: publish artifacts
            inputs:
              artifactName: NET6-OSX
              targetPath: $(Build.ArtifactStagingDirectory)
            condition: always()

  - template: common/device-tests.yml
    parameters:
      projects:
        - name: essentials
          desc: Essentials
          android: $(System.DefaultWorkingDirectory)/src/Essentials/test/DeviceTests.Android/Essentials.DeviceTests.Android.csproj
          ios: $(System.DefaultWorkingDirectory)/src/Essentials/test/DeviceTests.iOS/Essentials.DeviceTests.iOS.csproj
        - name: core
          desc: Core
          android: $(System.DefaultWorkingDirectory)/src/Core/tests/DeviceTests.Android/Core.DeviceTests.Android.csproj
          ios: $(System.DefaultWorkingDirectory)/src/Core/tests/DeviceTests.iOS/Core.DeviceTests.iOS.csproj

  # only sign using the private server and not sigining Maui for now
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - stage: nuget_signing
      dependsOn: pack_net6
      displayName: Sign Nuget
      jobs:
        - template: sign-artifacts/jobs/v2.yml@xamarin-templates
          parameters:
            teamName: Maui
            usePipelineArtifactTasks: false
            targetFolder: $(Build.ArtifactStagingDirectory)/nuget/signed
            signedArtifactName: nuget
            signedArtifactPath: signed
            displayName: Sign Phase
            condition: and(succeeded(), ne(variables['signVmImage'], ''), or(eq(variables['Sign'], 'true'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'],'refs/tags/'))))
